<div>
    <h1>Развёртывание</h1>
    <div>
        <ul>
            <li>Строка подключения в ~/4 FrontEnd/Web/Web.config (DefaultConnection) - необходимо указать доступ к базе данных и название каталога. При авторизации/регистрации БД будет создана.</li>
            <li>Тестовая учётная запись с данными: maximal@user.com пароль: 123456</li>
        </ul>
    </div>
</div>
<div>
    <h1 class="page-header">
        Описание используемых решений
    </h1>
    <div>
        <h2>Back-end архитектура</h2>
        <div>
            <img height="400" src="~/Content/images/arch.png" alt="Бекенд архитектура" />
            <p>Back-end архитектура</p>
        </div>
    </div>
    <div>
        <h2>Безопасность</h2>
        <p>
            Проверка доступа обеспечивается Security сервисами.<br />
            ~/3 Business/Services/Security/SecurityServices/....<br />
            Сервис проверки доступа должен вызываться в сервисах логики(~/3 Business/Services/Entities),<br />
            или же с помощью атрибута безопастности если контроллер работает непосредсвенно с репозиторием<br />
        </p>
        <img src="~/Content/images/secattr.png" alt="Пример использования атрибута безопастности" />
    </div>
    <div>
        <h2>Mvc Templates</h2>
        <p>
            Подход, позволяющий избежать дублирования html кода и сделать все стандартные формы единообразными<br />
            В данной работе, примером являются формы регистрации, авторизации и редактирования профиля.<br />
            Найти их, можно в AccountController'е<br />
            Для рендеринга они используют одну общую view для редактирования ~/Views/Default/Edit.cshtml через метод базового контроллера
        </p>
    </div>
    <div>
        <h2>DI</h2>
        <p>Используется Ninject + интеграция с MVC. Сервис локатор. Соблюдается принцип инверсии зависимостей</p>
    </div>
    <div>
        <h2>SignalR</h2>
        <p>
            Фреймворк для реализации comet. Используется для отправки клиенту уведомлений о входящих сообщениях<br />
            (~/3 Business/Services/Entities/MessageService.cs метод SendMessage)
        </p>
    </div>
    <div>
        <h2>EF6</h2>
        <p>Code first, миграции, авторазвёртывание БД</p>
    </div>
    <div>
        <h2>Query Object</h2>
        <p>
            Объект связывания UI пейджинга, сортировки и поиска.<br />
        </p>
    </div>
    <div>
        <h2>Исключения</h2>
        <p>
            Для генерации кастомных исключений создан BaseCustomException.<br />
            В контроллерах и сервисах обрабатываются только эти исключения<br />
            Все остальные исключения должны логгироваться, как необработаные<br />
            (Системы логирования в данный момент нет, но планировалось использование elmah + commonlogger)
        </p>
    </div>
    <div>
        <h2>Front-end</h2>
        <p>
            Используется angular, noty, infinity-scroll, bootstrap<br/>
        </p>
    </div>
    <div>
        <h2>Строготипизированая генерация ссылок</h2>
        <p>Редиректы в контроллере с сохранением состояния, строготипизированы, а так же ActionLink в _layout</p>
    </div>
</div>